@using Models
@using System.Threading
@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager;

@if (MemberType.Equals("Adult") || MemberType.Equals("Child"))
{
    <div class="wrapper">
        <div class="inner">
            <EditForm Model=@newPersonModel OnValidSubmit="AddNewMember">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <div class="form-wrapper">
                        <label for>First Name</label>
                        <InputText class="form-control" @bind-Value="newPersonModel.FirstName"/>
                    </div>
                    <div class="form-wrapper">
                        <label>Last Name</label>
                        <InputText class="form-control" @bind-Value="newPersonModel.LastName"/>
                    </div>
                </div>
                <div class="form-wrapper">
                    <label>Age</label>
                    <InputNumber class="form-control" @bind-Value="newPersonModel.Age"/>
                </div>
                <div class="form-group">
                    <div class="form-wrapper">
                        <label>Weight</label>
                        <InputNumber class="form-control" @bind-Value="newPersonModel.Weight"/>
                    </div>

                    <div class="form-wrapper">
                        <label>Height</label>
                        <InputNumber class="form-control" @bind-Value="newPersonModel.Height"/>
                    </div>
                </div>


                <div class="form-wrapper">
                    <label>Sex</label>
                    <InputSelect class="form-control" @bind-Value="newPersonModel.Sex">
                        <option value="M">M</option>
                        <option value="F">F</option>
                    </InputSelect>
                </div>

                <div class="form-group">
                    <div class="form-wrapper">
                        <label>Hair Color</label>
                        <InputSelect class="form-control" @bind-Value="newPersonModel.HairColor">
                            @foreach (var hairColor in validHairColors)
                            {
                                <option value="@hairColor">@hairColor</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-wrapper">
                        <label>Eye Color</label>
                        <InputSelect class="form-control" @bind-Value="newPersonModel.EyeColor">
                            @foreach (var eyeColor in validEyeColors)
                            {
                                <option value="@eyeColor">@eyeColor</option>
                            }
                        </InputSelect>
                    </div>
                </div>


                @if (MemberType.Equals("Adult"))
                {
                    <div class="form-wrapper">
                        <label>Job Title</label>
                        <input type="text" class="form-control" @bind="jobTitle"/>
                    </div>
                }

                @if (MemberType.Equals("Child"))
                {
                    <div class="form-group">
                        <div class="form-wrapper">
                            <label>Interest 1</label>
                            <input type="text" class="form-control" @bind="interest1"/>
                        </div>

                        <div class="form-wrapper">
                            <label>Interest 2</label>
                            <input type="text" class="form-control" @bind="interest2"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="form-wrapper">
                            <label>Interest 3</label>
                            <input type="text" class="form-control" @bind="interest3"/>
                        </div>

                        <div class="form-wrapper">
                            <label>Interest 4</label>
                            <input type="text" class="form-control" @bind="interest4"/>
                        </div>
                    </div>

                    <div class="form-wrapper">
                        <label>Interest 5</label>
                        <input type="text" class="form-control" @bind="interest5"/>
                    </div>
                }


                <input type="submit" value="Add"/>
            </EditForm>
        </div>
    </div>
}

@if (MemberType.Equals("Pet"))
{
    <div class="wrapper">
        <div class="inner">
            <EditForm Model="@newPetModel" OnValidSubmit="AddNewMember">
                <div class="form-wrapper">
                    <label>Name</label>
                    <InputText class="form-control" @bind-Value="newPetModel.Name"/>
                </div>

                <div class="form-wrapper">
                    <label>Age</label>
                    <InputNumber class="form-control" @bind-Value="newPetModel.Age"/>
                </div>

                <div class="form-wrapper">
                    <label>Species</label>
                    <InputSelect @bind-Value="@newPetModel.Species">
                        @foreach (var species in validSpecies)
                        {
                            <option value="@species">@species</option>
                        }
                    </InputSelect>
                </div>

                <input type="submit" value="Add"/>
            </EditForm>
        </div>
    </div>
}

@code {

    [Parameter]
    public string MemberType { get; set; }

    [Parameter]
    public Family Family { get; set; }

    [Parameter]
    public int FormCounter { get; set; }

    [Parameter]
    public EventCallback<int> FormCounterChanged { get; set; }

    private Person newPersonModel = new Person();

    [Parameter]
    public Adult AdultToBeAdded { get; set; }

    [Parameter]
    public EventCallback<Adult> AdultToBeAddedChanged { get; set; }

    [Parameter]
    public Child ChildToBeAdded { get; set; }

    [Parameter]
    public EventCallback<Child> ChildToBeAddedChanged { get; set; }

    [Parameter]
    public Pet PetToBeAdded { get; set; }

    [Parameter]
    public EventCallback<Pet> PetToBeAddedChanged { get; set; }

    private Pet newPetModel = new Pet();

    private string firstName;
    private string lastName;
    private int age;
    private int weight;
    private int height;
    private string sex = "M";
    private string hairColor = "Blond";
    private string eyeColor = "Brown";
    private string petName;
    private int petAge;
    private string petSpecies;

    private string interest1;
    private string interest2;
    private string interest3;
    private string interest4;
    private string interest5;

    private string jobTitle;
    private int id;
    private int currentInput = 1;
    private List<ChildInterest> interests;

    async Task AddNewMember()
    {

        Console.WriteLine(NavigationManager.Uri);
        
        if (MemberType.Equals("Adult"))
        {
            List<Family> families = FamilyService.GetAllFamilies();
            foreach (var family in families)
            {
                foreach (var adult in family.Adults)
                {
                    id = adult.Id + 1;
                }
            }
            AdultToBeAdded = new Adult
            {
                Id = id,
                Age = newPersonModel.Age,
                FirstName = newPersonModel.FirstName,
                LastName = newPersonModel.LastName,
                Height = newPersonModel.Height,
                Sex = newPersonModel.Sex,
                Weight = newPersonModel.Weight,
                EyeColor = newPersonModel.EyeColor,
                HairColor = newPersonModel.HairColor,
                JobTitle = jobTitle
            };
            if (AdultToBeAdded == null)
                Console.WriteLine("/t/t/t Adult to be added is null");
            FamilyService.AddPerson(Family, AdultToBeAdded, MemberType);
            await AdultToBeAddedChanged.InvokeAsync(AdultToBeAdded);
        }


        if (MemberType.Equals("Pet"))
        {
            List<Family> families = FamilyService.GetAllFamilies();
            foreach (var family in families)
            {
                foreach (var pet in family.Pets)
                {
                    id = pet.Id + 1;
                }
            }

            PetToBeAdded = new Pet
            {
                Age = newPetModel.Age,
                Name = newPetModel.Name,
                Id = id,
                Species = newPetModel.Species
            };
            FamilyService.AddPet(Family, PetToBeAdded);
            await PetToBeAddedChanged.InvokeAsync(PetToBeAdded);
        }

        if (MemberType.Equals("Child"))
        {
            List<Family> families = FamilyService.GetAllFamilies();
            foreach (var family in families)
            {
                foreach (var child in family.Children)
                {
                    id = child.Id + 1;
                }
            }

            interests = new List<ChildInterest>();

            if (interest1 != null && !interest1.Equals(""))
                interests.Add(new ChildInterest() {ChildId = id, InterestId = interest1});
            if (interest2 != null && !interest2.Equals(""))
                interests.Add(new ChildInterest() {ChildId = id, InterestId = interest2});
            if (interest3 != null && !interest3.Equals(""))
                interests.Add(new ChildInterest() {ChildId = id, InterestId = interest3});
            if (interest4 != null && !interest4.Equals(""))
                interests.Add(new ChildInterest() {ChildId = id, InterestId = interest4});
            if (interest5 != null && !interest5.Equals(""))
                interests.Add(new ChildInterest() {ChildId = id, InterestId = interest5});

            ChildToBeAdded = new Child
            {
                Id = id,
                Age = newPersonModel.Age,
                FirstName = newPersonModel.FirstName,
                LastName = newPersonModel.LastName,
                Height = newPersonModel.Height,
                Sex = newPersonModel.Sex,
                Weight = newPersonModel.Weight,
                EyeColor = newPersonModel.EyeColor,
                HairColor = newPersonModel.HairColor,
                ChildInterests = interests
            };
            FamilyService.AddPerson(Family, ChildToBeAdded, MemberType);
            Console.WriteLine("Firing event for " + ChildToBeAdded.FirstName);
            await ChildToBeAddedChanged.InvokeAsync(ChildToBeAdded);
        }
        if (MemberType.Equals("Adult"))
            FormCounter = 2;
        if (MemberType.Equals("Child"))
            FormCounter = 3;
        if (MemberType.Equals("Pet"))
            FormCounter = 4;
        Console.WriteLine("Firing new event with " + FormCounter);
        if (FormCounter == 2 || FormCounter == 3)
            await FormCounterChanged.InvokeAsync(FormCounter);
        if (!NavigationManager.Uri.Contains("addFamily"))
            NavigationManager.NavigateTo("/FamilyTree/" + Family.StreetName + " " + Family.HouseNumber);
    }


    private List<string> validEyeColors = new List<string>
    {
        "Brown", "Grey", "Green", "Blue", "Amber", "Hazel"
    };

    private List<string> validHairColors = new List<string>
    {
        "Blonde", "Red", "Brown", "Black", "White", "Grey", "Blue", "Green", "Leverpostej"
    };

    private List<string> validSpecies = new List<string>
    {
        "Dog", "Cat", "Hamster", "Owl", "Snake", "Otter", "Budgerigar"
    };

}