@using Models
@using Assignment1.Pages

<div class="user-box" style="@css">
    <div class="content">
        <h2>@Symbol</h2>
        <h3>@username</h3>
        <p>
            @userDescription
        </p>
        @if (Person.Equals("Administrator") || Person.Equals("RegularUser")){
            <a @onclick="UpdateCssString" class="btn btn-primary">View </a>
        }
        @if (Person.Equals("Visitor")){
            <a @onclick="ContinueAsVisitor" class="btn btn-primary">Continue </a>
        }
     </div>
</div>

@* <BlazorModal Title="Hello from Blazor Templated Components" IsOpened="isOpened"> *@
@*     <ModalBody> *@
@*         <h4>Is it nice?</h4> *@
@*         <p>this is a templated component in Blazor WebAssembly</p> *@
@*     </ModalBody> *@
@*     <ModalFooter> *@
@*         <button class="btn btn-primary">Close Modal</button> *@
@*     </ModalFooter> *@
@* </BlazorModal> *@

@code {
    // [CascadingParameter] 
    // public IModalService Modal { get; set; }
    
    [Parameter]
    public bool IsVisitor { get; set; }
    
    [Parameter]
    public string CssString { get; set; }
    
    [Parameter]
    public string CssRegisterString { get; set; }
    
    [Parameter]
    public EventCallback<string> CssStringChanged { get; set; }
    
    [Parameter]
    public EventCallback<string> CssRegisterStringChanged { get; set; }
    
    [Parameter]
    public EventCallback<bool> IsVisitorChanged { get; set; }
    
    private string css => $"border: {borders};";
    private string[] bordersStyle = new[]
    {
        "background: linear-gradient(315deg, #ff0057, #e64a19)",
        "background: linear-gradient(315deg, #89ff00, #00bcd4)",
        "background: linear-gradient(315deg, #e91e63, #5d02ff)",
        "background: linear-gradient(315deg, #ff0000, #ffc107)"
    };

    [Parameter] public string Person { get; set; }
    [Parameter] public string Symbol { get; set; }

    private string username;
    private string userImagePath;
    private string userDescription;

    public string borders { get; set; }


    protected override void OnInitialized()
    {
        switch (Person)
        {
            case "Administrator":
                username = "Administrator";
                userDescription = "All functions are available for this type of account.";
                break;
            case "RegularUser":
                username = "Regular User";
                userDescription = "Function for update family information is available for this type of account";
                break;
            case "Visitor":
                username = "Visitor";
                userDescription = "Function for viewing family information is available for this type of account";
                break;
        }
    }


    public void buttonClicked()
    {
        //borders = "3px solid green";
    }

    async Task UpdateCssString()
    {
        CssString = "show";
        if (Person.Equals("Administrator"))
            CssRegisterString = "hide";
        else
        {
            Console.WriteLine("Showing css register string");
            CssRegisterString = "show";
        }
        
        await CssStringChanged.InvokeAsync(CssString);
        Console.WriteLine("Also invoking register string");
        await CssRegisterStringChanged.InvokeAsync(CssRegisterString);
    }
    
    async Task ContinueAsVisitor()
    {
        IsVisitor = true;
        await IsVisitorChanged.InvokeAsync(IsVisitor);
        
    }
}