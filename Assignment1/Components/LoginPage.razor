@using Models
@using Assignment1.Validation.BlazorSample.Client

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject NavigationManager NavigationManager

<link href="css/login.css" rel="stylesheet" type="text/css">

<section class="forms-section @CssClass" >
  <div class="forms">
    <div @attributes=CustomLoginClasses>
      <button type="button" class="switcher switcher-login" @onclick=OnFirstButtonClicked>
          Login
          <span class="underline"></span>
        </button>
        <EditForm Model="@user" OnValidSubmit=@ValidLoginFormSubmitted class="form form-login">
          <DataAnnotationsValidator />
          <CustomValidator @ref="@customLoginValidator" />
          <ValidationSummary />
          <fieldset>
            <legend>Please, enter your username and password for login.</legend>
            <div class="input-block">
              <label for="login-username">Username</label>
              <input id="login-username" type="text" @bind-value="user.Username">
            </div>
            <div class="input-block">
              <label for="login-password">Password</label>
              <input id="login-password" type="password" @bind-value="user.Password">
            </div>
          </fieldset>
          <button type="submit" class="btn-login" @onclick=OnLoginButtonClicked>Login</button>
        </EditForm>
    </div>
    <div @attributes=CustomSignupClasses>
      <button type="button" class="switcher switcher-signup" @onclick=OnSecondButtonClicked>
        Sign Up
        <span class="underline"></span>
      </button>
      <EditForm Model="@user" OnValidSubmit=@ValidSignupFormSubmitted class="form form-signup">
        <DataAnnotationsValidator />
        <CustomValidator @ref="@customSignupValidator" />
        <ValidationSummary />
        <fieldset>
          <legend>Please, enter your username, password and password confirmation for sign up.</legend>
          <div class="input-block">
            <label for="signup-username">Username</label>
            <input id="signup-username" type="text" @bind-value="user.Username">
          </div>
          <div class="input-block">
            <label for="signup-password">Password</label>
            <input id="signup-password" type="password" @bind-value="user.Password">
          </div>
          <div class="input-block">
            <label for="signup-password-confirm">Confirm password</label>
            <input id="signup-password-confirm" type="password" @bind-value="confPassword">
          </div>
        </fieldset>
        <button type="submit" class="btn-signup" @onclick=OnSignupButtonClicked>Continue</button>
      </EditForm>
    </div>
    <span class="close-modal-button" @onclick=@UpdateCssClass>X</span>
  </div>
</section>

@code {
  private CustomValidator customSignupValidator;
  private CustomValidator customLoginValidator;

  [Parameter]
  public string CssClass { get; set; }

  private string cssRegisterString;
  
  [Parameter]
  public string CssRegisterString
  {
    get => cssRegisterString;
    set {
      if (value != null) {
        if (value.Equals("hide")) {
          cssRegisterString = "hide";
          CustomSignupClasses["class"] = "hide";
          CustomLoginClasses["class"] = "form-wrapper is-active";
        }
        else {
          cssRegisterString = "show";
          OnFirstButtonClicked();
        }
      }
      else
        cssRegisterString = null;

      Console.WriteLine("\t\t\tCalling state has changed");
      user = new User();
      confPassword = string.Empty;
    }
  }
  
  [Parameter]
  public EventCallback<string> CssRegisterStringChanged { get; set; }
  
  [Parameter]
  public EventCallback<string> CssClassChanged { get; set; }

  private string confPassword;

  private User user { get; set; } = new User();
  
  private Dictionary<string, object> CustomLoginClasses = new Dictionary<string, object>();
  private Dictionary<string, object> CustomSignupClasses = new Dictionary<string, object>();

  protected override void OnInitialized()
  {
    CustomLoginClasses = new Dictionary<string, object>
    {
      ["class"] = "form-wrapper is-active"
    };
    
    CustomSignupClasses = new Dictionary<string, object>
    {
      ["class"] = "form-wrapper"
    };
  }

  private void OnFirstButtonClicked()
  {
    CustomLoginClasses["class"] = "form-wrapper is-active";
    CustomSignupClasses["class"] = "form-wrapper";
  }

  private void OnSecondButtonClicked()
  {
    CustomLoginClasses["class"] = "form-wrapper";
    CustomSignupClasses["class"] = "form-wrapper is-active";
  }

  private void OnLoginButtonClicked()
  {
    Console.WriteLine("Username: " + user.Username + " Password: " + user.Password);
  }

  private void OnSignupButtonClicked()
  {
    Console.WriteLine("Username: " + user.Username + " Password: " + user.Password + " Confirm Password: " + confPassword);
  }

  private void ValidLoginFormSubmitted()
  {
    Console.WriteLine("Calling valid login submitted");
    customLoginValidator.ClearErrors();
    
    var errors = new Dictionary<string, string>();
    try
    {
      ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(user.Username, user.Password);
      NavigationManager.NavigateTo("/");
    }
    catch (Exception e)
    {
      Console.WriteLine("Caught exception");
      errors.Add("credentials not matching", e.Message);
    }
    // errors.Add("does this work", "hello there");
    if (errors.Any())
    {
      Console.WriteLine("Displaying errors");
      customLoginValidator.DisplayErrors(errors);
    }
  }

  private void ValidSignupFormSubmitted()
  {
    customSignupValidator.ClearErrors();
    
    var errors = new Dictionary<string, string>();
    
    if (string.IsNullOrEmpty(confPassword))
      errors.Add("confirmation password", "Password Confirmation is required.");
    else if (!confPassword.Equals(user.Password))
      errors.Add("no match", "Confirmation must match password");
    
    if (errors.Any())
      customSignupValidator.DisplayErrors(errors);
    else
    {
      UserService.AddUser(user.Username, user.Password);
    }
    
  }

  async Task UpdateCssClass()
  {
    Console.WriteLine("Register value " + CssRegisterString);
    CssClass = "hide";
    CssRegisterString = "hide";
    OnFirstButtonClicked();
    await CssClassChanged.InvokeAsync(CssClass);
    await CssRegisterStringChanged.InvokeAsync(CssRegisterString);
  }
}

