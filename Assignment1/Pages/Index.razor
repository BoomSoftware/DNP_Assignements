@page "/"
@using Models
@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider 

 @if (!canView)
{ 
    <div class="container">
        <UserBox Person="Administrator" Symbol="👑" @bind-CssString="@cssString" @bind-CssRegisterString="@cssRegisterString"/>
        <UserBox Person="RegularUser" Symbol="👤" @bind-CssString="@cssString" @bind-CssRegisterString="@cssRegisterString"/>
        <UserBox Person="Visitor" Symbol="🔎" @bind-IsVisitor="@canView"/>
    </div>
    <LoginPage @bind-CssClass="@cssString" @bind-CssRegisterString="@cssRegisterString"/>
    PlsWork();
}

@* @if (canView) *@
@* { *@
@*     <div class="admin-box"> *@
@*         <AuthorizeView> *@
@*             <UserBox Person="Administrator"></UserBox> *@
@*         </AuthorizeView> *@
@*     </div> *@
@*     AddNewFamily(); *@
@* } *@

@if(canView)
    {
        <div class="title-box" style="background-color: white; border: 5px solid black;">
            <h3>Select Family Address</h3>
             <select @bind="address" @onclick=DisplayUsers>
                 @foreach (Family family in families)
                 {
                     <option>@family.StreetName @family.HouseNumber</option>
                 }
             </select>
        </div>
        <button type="button" @onclick=GoToFamilyTree>Open Family</button>
        <AuthorizeView Policy="MustBeAdministrator">
            <Authorized >
                <button class="btn btn-primary" @onclick="OpenCreateFamily">Create Family</button>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView>
            <Authorized >
                <button class="btn btn-primary" @onclick="Logout">Log-out</button>
            </Authorized>
        </AuthorizeView>
    }



@code
{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    
    private string cssString = "hide";
    private string cssRegisterString;
    private bool canView;

    private IList<Family> families;
    private string address;
    private Family selectedFamily;
    private bool usersComponents;

    protected override void OnInitialized()
    {
        families = FamilyService.GetAllFamilies();
    }

    public void GoToFamilyTree()
    {
        NavigationManager.NavigateTo("/FamilyTree/" + address);
    }
    
    // public void AddNewFamily()
    // {
    //    families.Add(selectedFamily);
    // }

    public void DisplayUsers()
    {
        if (address != null)
        {
            foreach (var family in families)
            {
                if (address.Equals(family.StreetName + " " + family.HouseNumber))
                {
                    selectedFamily = family;
                }
            }
        }

        if (selectedFamily != null)
            usersComponents = true;
    }
    
    private void PlsWork()
    {
        Console.WriteLine("Pls work got called");
        bool oldCanView = canView;
        canView = AuthenticationStateTask.Result.User.Identity.IsAuthenticated;
        if (oldCanView != canView)
        {
            StateHasChanged();
        }
    }

    private void OpenCreateFamily()
    {
        NavigationManager.NavigateTo("/addFamily");
    }

    private void Logout()
    {
        cssRegisterString = "hide";
        cssString = "hide";
        canView = false;
        ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
        NavigationManager.NavigateTo("/");
    }
}